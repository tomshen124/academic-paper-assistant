"""add_task_type_to_token_usage

Revision ID: 9af9668e93dd
Revises: 4cb3fad9633c
Create Date: 2025-04-21 15:10:45.045986

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9af9668e93dd'
down_revision: Union[str, None] = '4cb3fad9633c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_relationships_id', table_name='relationships')
    op.drop_index('ix_relationships_relation_type', table_name='relationships')
    op.drop_index('ix_relationships_source_id', table_name='relationships')
    op.drop_index('ix_relationships_target_id', table_name='relationships')
    op.drop_table('relationships')
    op.drop_index('ix_statistics_cache_cache_key', table_name='statistics_cache')
    op.drop_index('ix_statistics_cache_expires_at', table_name='statistics_cache')
    op.drop_index('ix_statistics_cache_id', table_name='statistics_cache')
    op.drop_table('statistics_cache')
    op.drop_index('ix_statistics_task_created_at', table_name='statistics_task')
    op.drop_index('ix_statistics_task_id', table_name='statistics_task')
    op.drop_index('ix_statistics_task_status', table_name='statistics_task')
    op.drop_index('ix_statistics_task_task_type', table_name='statistics_task')
    op.drop_table('statistics_task')
    op.drop_index('ix_entities_entity_type', table_name='entities')
    op.drop_index('ix_entities_id', table_name='entities')
    op.drop_index('ix_entities_name', table_name='entities')
    op.drop_table('entities')
    op.drop_index('ix_import_records_id', table_name='import_records')
    op.drop_table('import_records')
    op.add_column('token_usage', sa.Column('task_type', sa.String(length=50), server_default='default', nullable=False))
    # 为现有记录设置默认值
    op.execute("UPDATE token_usage SET task_type = 'default'")
    op.create_index(op.f('ix_token_usage_task_type'), 'token_usage', ['task_type'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_token_usage_task_type'), table_name='token_usage')
    op.drop_column('token_usage', 'task_type')
    op.create_table('import_records',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('file_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('entities_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('relationships_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='import_records_pkey')
    )
    op.create_index('ix_import_records_id', 'import_records', ['id'], unique=False)
    op.create_table('entities',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('entities_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('properties', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='entities_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_entities_name', 'entities', ['name'], unique=False)
    op.create_index('ix_entities_id', 'entities', ['id'], unique=False)
    op.create_index('ix_entities_entity_type', 'entities', ['entity_type'], unique=False)
    op.create_table('statistics_task',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('parameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('result', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='statistics_task_pkey')
    )
    op.create_index('ix_statistics_task_task_type', 'statistics_task', ['task_type'], unique=False)
    op.create_index('ix_statistics_task_status', 'statistics_task', ['status'], unique=False)
    op.create_index('ix_statistics_task_id', 'statistics_task', ['id'], unique=False)
    op.create_index('ix_statistics_task_created_at', 'statistics_task', ['created_at'], unique=False)
    op.create_table('statistics_cache',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('cache_key', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('cache_value', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='statistics_cache_pkey')
    )
    op.create_index('ix_statistics_cache_id', 'statistics_cache', ['id'], unique=False)
    op.create_index('ix_statistics_cache_expires_at', 'statistics_cache', ['expires_at'], unique=False)
    op.create_index('ix_statistics_cache_cache_key', 'statistics_cache', ['cache_key'], unique=True)
    op.create_table('relationships',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('source_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('target_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('relation_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('weight', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('properties', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['source_id'], ['entities.id'], name='relationships_source_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['target_id'], ['entities.id'], name='relationships_target_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='relationships_pkey')
    )
    op.create_index('ix_relationships_target_id', 'relationships', ['target_id'], unique=False)
    op.create_index('ix_relationships_source_id', 'relationships', ['source_id'], unique=False)
    op.create_index('ix_relationships_relation_type', 'relationships', ['relation_type'], unique=False)
    op.create_index('ix_relationships_id', 'relationships', ['id'], unique=False)
    # ### end Alembic commands ###
